"use strict";(self.webpackChunklxm_web=self.webpackChunklxm_web||[]).push([[7146],{36847:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>t,metadata:()=>l,toc:()=>h});var i=a(74848),n=a(28453);const t={sidebar_position:1},r="Defining matching strategies",l={id:"guides/matching-config",title:"Defining matching strategies",description:"LinXmart utilises a probabilistic linkage engine. This engine uses a 'match configuration' that tells it how to compare records, and when to designate two records as a match. Each Linkage Project has a separate match configuration, and a Linkage Project\u2019s match configuration can be modified at any time. After modification, all future linkages will use the new match configuration, while previous linkages will not change.",source:"@site/docs/guides/matching-config.md",sourceDirName:"guides",slug:"/guides/matching-config",permalink:"/docs/guides/matching-config",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Linkage in LinXmart",permalink:"/docs/guides/record-linkage"},next:{title:"Merge vs best-link grouping",permalink:"/docs/guides/grouping-config"}},c={},h=[{value:"The default config",id:"the-default-config",level:2},{value:"Match strategies",id:"match-strategies",level:2},{value:"Blocking",id:"blocking",level:3},{value:"Deterministic strategy",id:"deterministic-strategy",level:3},{value:"Probabilistic strategy",id:"probabilistic-strategy",level:3},{value:"Strategy configuration",id:"strategy-configuration",level:2},{value:"Blocking fields",id:"blocking-fields",level:3},{value:"Matching fields",id:"matching-fields",level:3},{value:"Comparison types",id:"comparison-types",level:3},{value:"Exact",id:"exact",level:4},{value:"Jaro-Winkler",id:"jaro-winkler",level:4},{value:"Numerical (Year)",id:"numerical-year",level:4},{value:"Strict Numerical",id:"strict-numerical",level:4},{value:"String Contains",id:"string-contains",level:4},{value:"Hierarchical String Contains",id:"hierarchical-string-contains",level:4},{value:"Bloom Field (Dice)",id:"bloom-field-dice",level:4},{value:"Bloom Field (Hamming)",id:"bloom-field-hamming",level:4},{value:"Bloom Field (Jaccard)",id:"bloom-field-jaccard",level:4},{value:"Hierarchical Bloom Field Contains",id:"hierarchical-bloom-field-contains",level:4}];function o(e){const s={a:"a",admonition:"admonition",annotation:"annotation",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",math:"math",mfrac:"mfrac",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",p:"p",semantics:"semantics",span:"span",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"defining-matching-strategies",children:"Defining matching strategies"})}),"\n",(0,i.jsx)(s.p,{children:"LinXmart utilises a probabilistic linkage engine. This engine uses a 'match configuration' that tells it how to compare records, and when to designate two records as a match. Each Linkage Project has a separate match configuration, and a Linkage Project\u2019s match configuration can be modified at any time. After modification, all future linkages will use the new match configuration, while previous linkages will not change."}),"\n",(0,i.jsxs)(s.p,{children:["To appropriately modify the match configuration, it is important that the operator has some understanding of ",(0,i.jsx)(s.a,{href:"/docs/advanced/probabilistic-linkage",children:"probabilistic record linkage"}),"."]}),"\n",(0,i.jsx)(s.h2,{id:"the-default-config",children:"The default config"}),"\n",(0,i.jsxs)(s.p,{children:["Each new ",(0,i.jsx)(s.a,{href:"/docs/concepts/linkage-projects",children:"Linkage Project"})," will be created with a default match configuration. Operators can modify the configuration for each Linkage Project through the web UI if and when required. The default strategy has been designed to cater for a wide variety of administrative type datasets, so should give accurate results out of the box. However, all data is different, and as you develop a better understanding of your data and probabilistic linkage, you may benefit from changing this over time."]}),"\n",(0,i.jsx)(s.admonition,{type:"tip",children:(0,i.jsx)(s.p,{children:"The default matching strategies for all new Linkage Projects can be configured at a global level. Set this default to suit your most common data matching scenarios."})}),"\n",(0,i.jsx)(s.h2,{id:"match-strategies",children:"Match strategies"}),"\n",(0,i.jsxs)(s.p,{children:["The match configuration consists of one or more ",(0,i.jsx)(s.em,{children:"strategies"}),". Each strategy must have one or more blocking fields and (optionally) a list of matching fields, the latter of which have associated comparison types and matching/non-matching probabilities. Each linkage strategy has its own threshold value associated with it."]}),"\n",(0,i.jsx)(s.h3,{id:"blocking",children:"Blocking"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/advanced/probabilistic-linkage#blocking",children:"Blocking"})," is an indexing technique that is used to reduce the number of comparisons required for a match strategy. Comparing every record to every other record is not always practical, so defining a a set of fields that can reduce the comparisons space is desirable. Each strategy defines a set of fields to ",(0,i.jsx)(s.em,{children:"block"})," on before records are compared."]}),"\n",(0,i.jsx)(s.p,{children:"As an example, LinXmart\u2019s default match configuration has two linkage strategies with different blocks. The blocks for these strategies are:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Strategy 1:"})," ",(0,i.jsx)(s.code,{children:"Date of Birth"})," and ",(0,i.jsx)(s.code,{children:"Sex"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Strategy 2:"})," ",(0,i.jsx)(s.code,{children:"Soundex of Surname"})," and ",(0,i.jsx)(s.code,{children:"Initial of Given Name"})]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["During the match processing, the first strategy will only compare records with the same ",(0,i.jsx)(s.code,{children:"Date of Birth"})," and ",(0,i.jsx)(s.code,{children:"Sex"}),". The second strategy will only compare records with the same ",(0,i.jsx)(s.code,{children:"Soundex of Surname"})," and ",(0,i.jsx)(s.code,{children:"Initial of Given Name"}),". This gives very high coverage of the desirable comparison space."]}),"\n",(0,i.jsx)(s.h3,{id:"deterministic-strategy",children:"Deterministic strategy"}),"\n",(0,i.jsxs)(s.p,{children:["A ",(0,i.jsx)(s.em,{children:"deterministic"})," strategy is one based on a defined set of equal fields. For example, if two records have the same ",(0,i.jsx)(s.em,{children:"jurisdictional linkage key"})," value, match them together. A deterministic strategy is one that has no matching fields defined, only blocking fields. These blocking fields are used to deterministically match all records together within the same blocks."]}),"\n",(0,i.jsxs)(s.p,{children:["A deterministic strategy does not use the ",(0,i.jsx)(s.code,{children:"Threshold"})," value that is defined."]}),"\n",(0,i.jsx)(s.h3,{id:"probabilistic-strategy",children:"Probabilistic strategy"}),"\n",(0,i.jsxs)(s.p,{children:["A ",(0,i.jsx)(s.em,{children:"probabilistic"})," strategy uses ",(0,i.jsx)(s.a,{href:"/docs/advanced/probabilistic-linkage#match-and-non-match-probabilities-m-and-u-probabilities",children:"conditional probabilities"})," to determine the likelihood that particular records belong to the same entity. Matching fields can be defined for each linkage field, with a comparison type and conditional probabilities that determine how weights for agreement and disagreement are determined."]}),"\n",(0,i.jsxs)(s.p,{children:["During the matching process, a comparison between two records will involve comparisons for each matching field defined in the strategy. The sum of each field level comparison will be summed to produce an overall ",(0,i.jsx)(s.em,{children:"score"})," for the record comparison. The ",(0,i.jsx)(s.code,{children:"Threshold"})," value is used to determine whether the record comparison results in a matching pair (the score is greater than or equal to the threshold value), or whether it is discarded."]}),"\n",(0,i.jsx)(s.h2,{id:"strategy-configuration",children:"Strategy configuration"}),"\n",(0,i.jsx)(s.p,{children:"Each match strategy has a number of fields that can be modified as required."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Edit Match Strategy",src:a(47783).A+"",width:"932",height:"238"})}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Field"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Name"}),(0,i.jsx)(s.td,{children:"A descriptive name given to the strategy for identification by an operator."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Threshold"}),(0,i.jsxs)(s.td,{children:["The value used to determine if a record comparison is classified as a match. If the ",(0,i.jsx)(s.em,{children:"score"})," from the record comparison is at least as much as the threshold value, it results in a matched pair."]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Order"}),(0,i.jsx)(s.td,{children:"The order in which this strategy is run against the other strategies in the match configuration. Two records will not be compared if a previous strategy has already classified them as a match."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Enabled"}),(0,i.jsx)(s.td,{children:"A flag indicating if this strategy will be used."})]})]})]}),"\n",(0,i.jsx)(s.admonition,{type:"tip",children:(0,i.jsx)(s.p,{children:"Put your deterministic strategies first in order, as these will run faster than probabilistic comparisons."})}),"\n",(0,i.jsx)(s.h3,{id:"blocking-fields",children:"Blocking fields"}),"\n",(0,i.jsx)(s.p,{children:"Each blocking field is combined to produce discrete sets of records to compare during the match processing. The more fields added here, the smaller the size of the record sets. Smaller record sets produces less comparisons, so they are more likely to be matches, but potentially miss out on other record pairs that could be matches."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Blocking Fields",src:a(88724).A+"",width:"933",height:"309"})}),"\n",(0,i.jsxs)(s.p,{children:["In addition to specifying the linkage field, you can specify whether to include empty values (",(0,i.jsx)(s.code,{children:"Match Empty"}),"). Setting this to ",(0,i.jsx)(s.code,{children:"True"})," will include ",(0,i.jsx)(s.code,{children:"null"})," or empty values in the set of acceptable value combinations. This will only allow you to compare records that ",(0,i.jsx)(s.em,{children:"both"})," have that value set to ",(0,i.jsx)(s.code,{children:"null"}),"."]}),"\n",(0,i.jsx)(s.h3,{id:"matching-fields",children:"Matching fields"}),"\n",(0,i.jsx)(s.p,{children:"There are several ways to add matching fields to a strategy. LinXmart allows the operator to add matching fields one by one, to choose the default matching fields defined in LinXmart, or to copy the matching fields from a previously created strategy, if one exists."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Empty Matching Fields",src:a(57913).A+"",width:"930",height:"230"})}),"\n",(0,i.jsxs)(s.p,{children:["To add the default matching fields, click the ",(0,i.jsx)(s.code,{children:"Add Default Matching Fields"})," link below the Matching Fields section when editing a strategy. To copy the matching fields from the previous match strategy (in terms of its order), click the ",(0,i.jsx)(s.code,{children:"Copy Matching Fields from Previous Strategy"})," link."]}),"\n",(0,i.jsxs)(s.p,{children:["To add matching fields individually, click ",(0,i.jsx)(s.code,{children:"Add Matching Field"})," from this pane. The following fields are presented:"]}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Field"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Name"}),(0,i.jsx)(s.td,{children:"The linkage field to be compared. A drop-down box allows for selection from the available fields."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Comparison"}),(0,i.jsxs)(s.td,{children:["The type of comparator to be used. Options available depend on the linkage fields selected. ",(0,i.jsx)(s.a,{href:"#comparison-types",children:"Available options are listed below."})]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Match probability"}),(0,i.jsx)(s.td,{children:"Also known as the m-probability. The estimated probability that two records belonging to the same person have the same value of this linkage field"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Non-match probability"}),(0,i.jsx)(s.td,{children:"Also known as the u-probability. The estimated probability that two records belonging to different people have the same value of this linkage field"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Agreement weight (override)"}),(0,i.jsx)(s.td,{children:"The score to be given if two records have the same value of this linkage field. If a value is entered here, the match and non-match probabilities are ignored."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Disagreement weight (override)"}),(0,i.jsx)(s.td,{children:"The score to be given if two records do not have the same value of this linkage field. If a value is entered here, the match and non-match probabilities are ignored."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Weight curve"}),(0,i.jsxs)(s.td,{children:["Weight curves are used to convert the score found from an approximate comparison type (such as the Jaro-Winkler string comparator function or the several available Bloom filter comparison methods) to a score that lies somewhere between the agreement and disagreement weight. LinXmart provides several weight curve options, one for each approximate comparator type. In nearly all circumstances, the weight curve associated with the string-matching comparator should be used. For exact matching or other non-approximate approaches, this can be left as ",(0,i.jsx)(s.code,{children:"(none)"}),"."]})]})]})]}),"\n",(0,i.jsx)(s.h3,{id:"comparison-types",children:"Comparison types"}),"\n",(0,i.jsx)(s.h4,{id:"exact",children:"Exact"}),"\n",(0,i.jsxs)(s.p,{children:["This compares the two fields values as strings and if they are exactly the same, they are assigned the field\u2019s ",(0,i.jsx)(s.code,{children:"Agreement Weight"}),". If they are in any way different, they are assigned the ",(0,i.jsx)(s.code,{children:"Disagreement Weight"}),". These are the only two possible weights that can be assigned."]}),"\n",(0,i.jsx)(s.h4,{id:"jaro-winkler",children:"Jaro-Winkler"}),"\n",(0,i.jsx)(s.p,{children:"Jaro-Winkler is a string similarity algorithm designed for use with names. Compared values that are not exactly the same but are very similar will be given a high weight, with those less similar given a lower weight. These weights will be in between the agreement and disagreement weight for this field."}),"\n",(0,i.jsx)(s.h4,{id:"numerical-year",children:"Numerical (Year)"}),"\n",(0,i.jsx)(s.p,{children:"This compares years as numbers with some tolerance in matching. The comparator computes the difference in years relative to a base year (the year in which the Linkage Project was created). If the minimum value is less than 20 years from the base year and the values differ by no more than a year, then the full agreement weight is assigned.  If the minimum value is 20 years or more from the base year and the values differ by no more than 2 years then the full agreement weight is assigned. Otherwise, the weight is linearly interpolated between full agreement and full disagreement weights with a slope proportional to |year1 \u2013 year2|/min(year1,year2)."}),"\n",(0,i.jsx)(s.h4,{id:"strict-numerical",children:"Strict Numerical"}),"\n",(0,i.jsx)(s.p,{children:"This converts the field values to integers before comparing them as numbers with a tolerance of +/- 1.   E.g. 11 will match 12. Also, field values like \u20180009\u2019 and \u20189\u2019 will match (whereas they would not have in an exact string comparison). Full agreement and disagreement weights are the only two possible weights that can be assigned."}),"\n",(0,i.jsx)(s.h4,{id:"string-contains",children:"String Contains"}),"\n",(0,i.jsx)(s.p,{children:"This comparison will look for the existence of one field value within the other record. This is a bidirectional check. If one of the values exists within the other, full agreement is returned, otherwise full disagreement is returned."}),"\n",(0,i.jsx)(s.h4,{id:"hierarchical-string-contains",children:"Hierarchical String Contains"}),"\n",(0,i.jsx)(s.p,{children:"The comparison allows each side of the field comparison to have a delimited list of \u2018hierarchical\u2019 strings. When the comparison runs, only one value in the delimited lists of each side needs to match. The \u2018hierarchical\u2019 part means that each item in the list represents a value or code that can be broken down into hierarchies. For example, Canadian postcodes have two levels of hierarchy \u2013 the first 3 characters represents a wide geographic region (the forward sortation area (FSA) code) and the last 3 characters represents a local region within it. So, when each item in the delimited lists is compared, the levels within the hierarchies are checked. The first hierarchy achieves full agreement weight. The last hierarchy achieves a weight half-way between disagreement and agreement. The remaining hierarchies are even distributed between."}),"\n",(0,i.jsxs)(s.p,{children:["This comparison has two parameters: ",(0,i.jsx)(s.code,{children:"Value Levels"})," and ",(0,i.jsx)(s.code,{children:"Delimiters"}),". ",(0,i.jsx)(s.code,{children:"Value Levels"})," is a delimited list of hierarchies in the field. Zero means the entire string is checked. A positive value refers to the first n characters. A negative value refers to the last n characters. The ",(0,i.jsx)(s.code,{children:"Delimiters"})," field defines the characters used to separate the Value Levels as well as the values in the fields."]}),"\n",(0,i.jsx)(s.h4,{id:"bloom-field-dice",children:"Bloom Field (Dice)"}),"\n",(0,i.jsx)(s.p,{children:"This comparison type is used for comparing Bloom filters.  It computes the Dice coefficient, allowing string similarity matching to occur on encoded data fields. This comparison is only available for binary fields."}),"\n",(0,i.jsx)(s.span,{className:"katex-display",children:(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mi,{children:"D"}),(0,i.jsx)(s.mi,{children:"i"}),(0,i.jsx)(s.mi,{children:"c"}),(0,i.jsx)(s.mi,{children:"e"}),(0,i.jsx)(s.mo,{stretchy:"false",children:"("}),(0,i.jsx)(s.mi,{children:"A"}),(0,i.jsx)(s.mo,{separator:"true",children:","}),(0,i.jsx)(s.mi,{children:"B"}),(0,i.jsx)(s.mo,{stretchy:"false",children:")"}),(0,i.jsx)(s.mo,{children:"="}),(0,i.jsxs)(s.mfrac,{children:[(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mn,{children:"2"}),(0,i.jsx)(s.mi,{mathvariant:"normal",children:"\u2223"}),(0,i.jsx)(s.mi,{children:"A"}),(0,i.jsx)(s.mo,{children:"\u2229"}),(0,i.jsx)(s.mi,{children:"B"}),(0,i.jsx)(s.mi,{mathvariant:"normal",children:"\u2223"})]}),(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mi,{mathvariant:"normal",children:"\u2223"}),(0,i.jsx)(s.mi,{children:"A"}),(0,i.jsx)(s.mi,{mathvariant:"normal",children:"\u2223"}),(0,i.jsx)(s.mo,{children:"+"}),(0,i.jsx)(s.mi,{mathvariant:"normal",children:"\u2223"}),(0,i.jsx)(s.mi,{children:"B"}),(0,i.jsx)(s.mi,{mathvariant:"normal",children:"\u2223"})]})]})]}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"Dice(A,B) = \\frac {2|A \\cap B|} {|A| + |B|} "})]})})}),(0,i.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"D"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"i"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"ce"}),(0,i.jsx)(s.span,{className:"mopen",children:"("}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"A"}),(0,i.jsx)(s.span,{className:"mpunct",children:","}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.05017em"},children:"B"}),(0,i.jsx)(s.span,{className:"mclose",children:")"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:"="}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"2.363em",verticalAlign:"-0.936em"}}),(0,i.jsxs)(s.span,{className:"mord",children:[(0,i.jsx)(s.span,{className:"mopen nulldelimiter"}),(0,i.jsx)(s.span,{className:"mfrac",children:(0,i.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,i.jsxs)(s.span,{className:"vlist-r",children:[(0,i.jsxs)(s.span,{className:"vlist",style:{height:"1.427em"},children:[(0,i.jsxs)(s.span,{style:{top:"-2.314em"},children:[(0,i.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,i.jsxs)(s.span,{className:"mord",children:[(0,i.jsx)(s.span,{className:"mord",children:"\u2223"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"A"}),(0,i.jsx)(s.span,{className:"mord",children:"\u2223"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(s.span,{className:"mbin",children:"+"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(s.span,{className:"mord",children:"\u2223"}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.05017em"},children:"B"}),(0,i.jsx)(s.span,{className:"mord",children:"\u2223"})]})]}),(0,i.jsxs)(s.span,{style:{top:"-3.23em"},children:[(0,i.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,i.jsx)(s.span,{className:"frac-line",style:{borderBottomWidth:"0.04em"}})]}),(0,i.jsxs)(s.span,{style:{top:"-3.677em"},children:[(0,i.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,i.jsxs)(s.span,{className:"mord",children:[(0,i.jsx)(s.span,{className:"mord",children:"2\u2223"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"A"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(s.span,{className:"mbin",children:"\u2229"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.05017em"},children:"B"}),(0,i.jsx)(s.span,{className:"mord",children:"\u2223"})]})]})]}),(0,i.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,i.jsx)(s.span,{className:"vlist-r",children:(0,i.jsx)(s.span,{className:"vlist",style:{height:"0.936em"},children:(0,i.jsx)(s.span,{})})})]})}),(0,i.jsx)(s.span,{className:"mclose nulldelimiter"})]})]})]})]})}),"\n",(0,i.jsx)(s.h4,{id:"bloom-field-hamming",children:"Bloom Field (Hamming)"}),"\n",(0,i.jsx)(s.p,{children:"This comparison type is used for comparing Bloom filters.  It computes the Hamming distance, allowing string similarity matching to occur on encoded data fields. This comparison is only available for binary fields."}),"\n",(0,i.jsx)(s.span,{className:"katex-display",children:(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mi,{children:"H"}),(0,i.jsx)(s.mi,{children:"a"}),(0,i.jsx)(s.mi,{children:"m"}),(0,i.jsx)(s.mi,{children:"m"}),(0,i.jsx)(s.mi,{children:"i"}),(0,i.jsx)(s.mi,{children:"n"}),(0,i.jsx)(s.mi,{children:"g"}),(0,i.jsx)(s.mo,{stretchy:"false",children:"("}),(0,i.jsx)(s.mi,{children:"A"}),(0,i.jsx)(s.mo,{separator:"true",children:","}),(0,i.jsx)(s.mi,{children:"B"}),(0,i.jsx)(s.mo,{stretchy:"false",children:")"}),(0,i.jsx)(s.mo,{children:"="}),(0,i.jsx)(s.mi,{mathvariant:"normal",children:"\u2223"}),(0,i.jsx)(s.mi,{children:"A"}),(0,i.jsx)(s.mo,{children:"\u2295"}),(0,i.jsx)(s.mi,{children:"B"}),(0,i.jsx)(s.mi,{mathvariant:"normal",children:"\u2223"})]}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"Hamming(A,B) = |A \\oplus  B|"})]})})}),(0,i.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.08125em"},children:"H"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"ammin"}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,i.jsx)(s.span,{className:"mopen",children:"("}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"A"}),(0,i.jsx)(s.span,{className:"mpunct",children:","}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.05017em"},children:"B"}),(0,i.jsx)(s.span,{className:"mclose",children:")"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:"="}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mord",children:"\u2223"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"A"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(s.span,{className:"mbin",children:"\u2295"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.05017em"},children:"B"}),(0,i.jsx)(s.span,{className:"mord",children:"\u2223"})]})]})]})}),"\n",(0,i.jsx)(s.h4,{id:"bloom-field-jaccard",children:"Bloom Field (Jaccard)"}),"\n",(0,i.jsx)(s.p,{children:"This comparison type is used for comparing Bloom filters.  It computes the Jaccard distance, allowing string similarity matching to occur on encoded data fields. This comparison is only available for binary fields."}),"\n",(0,i.jsx)(s.span,{className:"katex-display",children:(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mi,{children:"J"}),(0,i.jsx)(s.mi,{children:"a"}),(0,i.jsx)(s.mi,{children:"c"}),(0,i.jsx)(s.mi,{children:"c"}),(0,i.jsx)(s.mi,{children:"a"}),(0,i.jsx)(s.mi,{children:"r"}),(0,i.jsx)(s.mi,{children:"d"}),(0,i.jsx)(s.mo,{stretchy:"false",children:"("}),(0,i.jsx)(s.mi,{children:"A"}),(0,i.jsx)(s.mo,{separator:"true",children:","}),(0,i.jsx)(s.mi,{children:"B"}),(0,i.jsx)(s.mo,{stretchy:"false",children:")"}),(0,i.jsx)(s.mo,{children:"="}),(0,i.jsxs)(s.mfrac,{children:[(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mi,{mathvariant:"normal",children:"\u2223"}),(0,i.jsx)(s.mi,{children:"A"}),(0,i.jsx)(s.mo,{children:"\u2229"}),(0,i.jsx)(s.mi,{children:"B"}),(0,i.jsx)(s.mi,{mathvariant:"normal",children:"\u2223"})]}),(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mi,{mathvariant:"normal",children:"\u2223"}),(0,i.jsx)(s.mi,{children:"A"}),(0,i.jsx)(s.mo,{children:"\u222a"}),(0,i.jsx)(s.mi,{children:"B"}),(0,i.jsx)(s.mi,{mathvariant:"normal",children:"\u2223"})]})]})]}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"Jaccard(A,B) = \\frac {|A \\cap B|} {|A \\cup  B|} "})]})})}),(0,i.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.09618em"},children:"J"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"a"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"cc"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"a"}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"r"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"d"}),(0,i.jsx)(s.span,{className:"mopen",children:"("}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"A"}),(0,i.jsx)(s.span,{className:"mpunct",children:","}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.05017em"},children:"B"}),(0,i.jsx)(s.span,{className:"mclose",children:")"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:"="}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"2.363em",verticalAlign:"-0.936em"}}),(0,i.jsxs)(s.span,{className:"mord",children:[(0,i.jsx)(s.span,{className:"mopen nulldelimiter"}),(0,i.jsx)(s.span,{className:"mfrac",children:(0,i.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,i.jsxs)(s.span,{className:"vlist-r",children:[(0,i.jsxs)(s.span,{className:"vlist",style:{height:"1.427em"},children:[(0,i.jsxs)(s.span,{style:{top:"-2.314em"},children:[(0,i.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,i.jsxs)(s.span,{className:"mord",children:[(0,i.jsx)(s.span,{className:"mord",children:"\u2223"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"A"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(s.span,{className:"mbin",children:"\u222a"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.05017em"},children:"B"}),(0,i.jsx)(s.span,{className:"mord",children:"\u2223"})]})]}),(0,i.jsxs)(s.span,{style:{top:"-3.23em"},children:[(0,i.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,i.jsx)(s.span,{className:"frac-line",style:{borderBottomWidth:"0.04em"}})]}),(0,i.jsxs)(s.span,{style:{top:"-3.677em"},children:[(0,i.jsx)(s.span,{className:"pstrut",style:{height:"3em"}}),(0,i.jsxs)(s.span,{className:"mord",children:[(0,i.jsx)(s.span,{className:"mord",children:"\u2223"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"A"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(s.span,{className:"mbin",children:"\u2229"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.05017em"},children:"B"}),(0,i.jsx)(s.span,{className:"mord",children:"\u2223"})]})]})]}),(0,i.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,i.jsx)(s.span,{className:"vlist-r",children:(0,i.jsx)(s.span,{className:"vlist",style:{height:"0.936em"},children:(0,i.jsx)(s.span,{})})})]})}),(0,i.jsx)(s.span,{className:"mclose nulldelimiter"})]})]})]})]})}),"\n",(0,i.jsx)(s.h4,{id:"hierarchical-bloom-field-contains",children:"Hierarchical Bloom Field Contains"}),"\n",(0,i.jsxs)(s.p,{children:["This works similarly to the String version with the exception that it is only 1 to many, not many to many. That is, one side of the comparison can only have a single item; the other side can have a list of items. This works on the same premise as the Hierarchical String Contains comparator in that you specify the ",(0,i.jsx)(s.code,{children:"Value Levels"})," and ",(0,i.jsx)(s.code,{children:"Delimiters"})," as part of the transform."]})]})}function d(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},88724:(e,s,a)=>{a.d(s,{A:()=>i});const i=a.p+"assets/images/blocking-field-list-459233c7c053761141da7a3cc8fa5d38.png"},47783:(e,s,a)=>{a.d(s,{A:()=>i});const i=a.p+"assets/images/match-strategy-edit-faa1a65fdb1db35ec69b1bcb783c5d73.png"},57913:(e,s,a)=>{a.d(s,{A:()=>i});const i=a.p+"assets/images/matching-field-emptylist-66e45def0fc748a42766d459b6775558.png"},28453:(e,s,a)=>{a.d(s,{R:()=>r,x:()=>l});var i=a(96540);const n={},t=i.createContext(n);function r(e){const s=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),i.createElement(t.Provider,{value:s},e.children)}}}]);